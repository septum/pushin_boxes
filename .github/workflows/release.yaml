name: RELEASE

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

env:
  itch_target: septum/pushin-boxes

jobs:
  release-wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: wasm32-unknown-unknown
          override: true
      - name: Install wasm-bindgen-cli
        run: cargo install wasm-bindgen-cli
      - name: Build
        run: cargo build --release --target wasm32-unknown-unknown
      - name: Prepare package
        run: |
          wasm-bindgen --no-typescript --out-name ${{ github.event.repository.name }} --out-dir wasm --target web target/wasm32-unknown-unknown/release/${{ github.event.repository.name }}.wasm
          cp -r assets wasm/
      - name: Optimize Wasm
        uses: NiklasEi/wasm-opt-action@v2
        with:
          file: wasm/*.wasm
      - name: Package as a zip
        uses: vimtor/action-zip@v1
        with:
          files: wasm
          dest: ${{ github.event.repository.name }}.zip
      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.event.repository.name }}.zip
          name: wasm
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.event.repository.name }}.zip
          asset_name: ${{ github.event.repository.name }}-wasm-${{ github.ref_name }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  release-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: x86_64-unknown-linux-gnu
          override: true
      - name: Install dependencies
        run: |
          sudo apt-get update; sudo apt-get install --no-install-recommends pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - name: Build
        run: cargo build --release --target x86_64-unknown-linux-gnu
      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ github.event.repository.name }} linux/
          cp -r assets linux/
      - name: Package as a zip
        uses: vimtor/action-zip@v1
        with:
          files: linux
          dest: ${{ github.event.repository.name }}.zip
      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.event.repository.name }}.zip
          name: linux
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.event.repository.name }}.zip
          asset_name: ${{ github.event.repository.name }}-linux-${{ github.ref_name }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  release-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: x86_64-pc-windows-msvc
          override: true
      - name: Build
        run: cargo build --release --target x86_64-pc-windows-msvc
      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ github.event.repository.name }}.exe windows/
          cp -r assets windows/
      - name: Package as a zip
        uses: vimtor/action-zip@v1
        with:
          files: windows
          dest: ${{ github.event.repository.name }}.zip
      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.event.repository.name }}.zip
          name: windows
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.event.repository.name }}.zip
          asset_name: ${{ github.event.repository.name }}-windows-${{ github.ref_name }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  release-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain for Apple Silicon
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          override: true
      - name: Build release for Apple Silicon
        run: |
          SDKROOT=$(xcrun -sdk macosx --show-sdk-path) MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version) cargo build --release --target aarch64-apple-darwin
      - name: Install toolchain for Apple x86
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          override: true
      - name: Build
        run: |
          SDKROOT=$(xcrun -sdk macosx --show-sdk-path) MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version) cargo build --release --target x86_64-apple-darwin
      - name: Create universal binary
        run: |
          lipo -create -output target/release/${{ github.event.repository.name }} target/aarch64-apple-darwin/release/${{ github.event.repository.name }} target/x86_64-apple-darwin/release/${{ github.event.repository.name }}
      - name: Create release
        run: |
          mkdir -p ${{ github.event.repository.name }}.app/Contents/MacOS
          cp target/release/${{ github.event.repository.name }} ${{ github.event.repository.name }}.app/Contents/MacOS/
          cp -r assets ${{ github.event.repository.name }}.app/Contents/MacOS/
          strip ${{ github.event.repository.name }}.app/Contents/MacOS/${{ github.event.repository.name }}
          ln -s /Applications ${{ github.event.repository.name }}.app
          hdiutil create -fs HFS+ -volname "${{ github.event.repository.name }}" -srcfolder ${{ github.event.repository.name }}.app ${{ github.event.repository.name }}.dmg
      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.event.repository.name }}.dmg
          name: mac
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.event.repository.name }}.dmg
          asset_name: ${{ github.event.repository.name }}-macos-${{ github.ref_name }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

  upload-to-itch:
    runs-on: ubuntu-latest
    needs:
      - release-wasm
      - release-linux
      - release-windows
      - release-macos

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./builds

      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - name: Upload to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          for channel in $(ls builds); do
            ./butler push \
                --fix-permissions \
                --userversion="${{ github.ref_name }}" \
                builds/$channel/* \
                ${{ env.itch_target }}:$channel
          done
